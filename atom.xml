<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://gehaoyu201.github.io/"/>
  <updated>2020-03-05T14:08:10.977Z</updated>
  <id>https://gehaoyu201.github.io/</id>
  
  <author>
    <name>葛浩宇</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端学习路线大致规划</title>
    <link href="https://gehaoyu201.github.io/2020/03/05/learning-path/"/>
    <id>https://gehaoyu201.github.io/2020/03/05/learning-path/</id>
    <published>2020-03-04T17:02:39.000Z</published>
    <updated>2020-03-05T14:08:10.977Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一．-前端相关概念建立"><a href="#一．-前端相关概念建立" class="headerlink" title="一．    前端相关概念建立"></a><strong>一．    前端相关概念建立</strong></h3><p>学习目标： 建立起整个前端与后端的知识大体系，给之后的学习打好地基。</p><p>主要内容：</p><p>浏览器的概念介绍：</p><p>浏览器的作用、工作方式</p><p>浏览器的概念介绍：</p><p>浏览器的作用、工作方式</p><p>HTTP协议：</p><p>协议产生的原因、作用、及内容</p><p>页面加载流程：</p><p>当用户打开浏览器，输入地址栏并按下回车之后发生的事情</p><h3 id="二．-HTML-CSS-JS基础-jQuery"><a href="#二．-HTML-CSS-JS基础-jQuery" class="headerlink" title="二．    HTML-CSS-JS基础-jQuery"></a><strong>二．    HTML-CSS-JS基础-jQuery</strong></h3><p>学习目标：</p><p>熟悉HTML布局、CSS样式、JS内容、jQuery的使用。</p><p>熟悉CSS盒模型、CSS的各种常见属性与属性值</p><p>熟悉页面的书写过程及简单的JS交互</p><p>熟悉一些较为常见的动态效果</p><p>学习内容：</p><p>HTML及HTML5：</p><p>理解浏览器如何解析HTML、基本的语法规则、不同标签的使用方式、嵌套方式</p><p>CSS：</p><p>理解层叠式样式表的语法规则、各种盒模型及常用布局</p><p>CSS3：</p><p>伪类、新选择器及高级盒模型</p><p>JavaScript：</p><p>理解JS的作用、运行规则、语法规则、数据类型、判定、循环</p><p>对象、数组、函数、日期、正则、异常</p><p>jQuery：</p><p>$函数、选择器、常用方法、链式调用、项目实战</p><h3 id="三．-JS进阶-面向对象-H5新特性"><a href="#三．-JS进阶-面向对象-H5新特性" class="headerlink" title="三．    JS进阶-面向对象-H5新特性"></a><strong>三．    JS进阶-面向对象-H5新特性</strong></h3><p>学习目标：</p><p>能够使用JS实现更加复杂的功能及动画</p><p>能够熟练操作DOM</p><p>能够理解面向对象的相关知识</p><p>能够使用HTML5的canvas进行小游戏的开发</p><p>主要内容：</p><p>DOM：</p><p>理解DOM的作用及使用规则</p><p>JS进阶：</p><p>快捷属性和尺寸、浏览器检测、事件流程</p><p>面向对象：</p><p>构造函数、原型、继承</p><p>H5新特性：</p><p>多线程、事件推送、前端存储、canvas、历史记录等</p><h3 id="四．-设计模式-AJAX-NodeJS-数据库"><a href="#四．-设计模式-AJAX-NodeJS-数据库" class="headerlink" title="四．    设计模式-AJAX-NodeJS-数据库"></a><strong>四．    设计模式-AJAX-NodeJS-数据库</strong></h3><p>学习目标：</p><p>能够理解函数的高级运用如闭包、IIFE、JS执行队列、垃圾回收机制</p><p>能够理解并会熟练运用设计模式</p><p>能够学会如何发送AJAX请求并处理响应</p><p>能够使用Express创建服务器应用程序</p><p>学会操作数据库</p><p>学习内容：</p><p>设计模式：</p><p>单例模式、工厂模式、闭包类、MVC思想、MVVM等</p><p>AJAX：</p><p>AJAX优缺点、异步请求、字符串模板、跨域</p><p>NodeJS：</p><p>Node服务器的相关知识、接口、文件操作、Express框架</p><p>数据库：</p><p>数据的概念、分类、使用Node操作数据库、MongoDB数据库</p><h3 id="五．-工程化-CSS预编译-ES2016-小程序"><a href="#五．-工程化-CSS预编译-ES2016-小程序" class="headerlink" title="五．    工程化-CSS预编译-ES2016-小程序"></a><strong>五．    工程化-CSS预编译-ES2016-小程序</strong></h3><p>学习目标：</p><p>能够使用工程化工具进行代码的压缩、编译、检测</p><p>能够使用Less、Sass进行CSS的开发</p><p>学会使用ES6语法、async、await等更高版本的ECMA内容</p><p>能够使用微信开发者工具进行小程序的开发</p><p>主要内容：</p><p>工程化：</p><p>Gulp使用、Webpack使用</p><p>CSS预编译：</p><p>Less使用、Sass使用</p><p>ES2016：</p><p>块级作用域、新的定义变量关键字、新的方法拓展、字符串模板与插值、新的数据结构、新的编程方式、类、继承、模块化</p><p>小程序 ：</p><p>小程序注册、介绍、组件、API、开发跨平台通用程序</p><h3 id="六．-Vue-React"><a href="#六．-Vue-React" class="headerlink" title="六．    Vue-React"></a><strong>六．    Vue-React</strong></h3><p>学习目标：</p><p>能够使用高级框架进行前端代码的开发</p><p>熟悉NodeJS全栈开发流程</p><p>归纳前端工作流程，重新认识前端，温故知新</p><p>学习内容：</p><p>Vue：</p><p>Vue详解、Vue插件、Vue脚手架、Vue项目实战</p><p>React与ReactNative：</p><p>React详解、React组件化、Redux状态管理、React项目实战</p><p>ReactNative详解、ReactNative创建移动端应用、ReactNative项目实战</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一．-前端相关概念建立&quot;&gt;&lt;a href=&quot;#一．-前端相关概念建立&quot; class=&quot;headerlink&quot; title=&quot;一．    前端相关概念建立&quot;&gt;&lt;/a&gt;&lt;strong&gt;一．    前端相关概念建立&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;学习目标： 建立起整个
      
    
    </summary>
    
    
      <category term="前端" scheme="https://gehaoyu201.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端学习" scheme="https://gehaoyu201.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件通信</title>
    <link href="https://gehaoyu201.github.io/2020/03/01/vue-component-talk/"/>
    <id>https://gehaoyu201.github.io/2020/03/01/vue-component-talk/</id>
    <published>2020-03-01T11:40:48.000Z</published>
    <updated>2020-03-05T14:08:32.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>学vue不得不了解的就是组件间的数据通信了（本文不讨论vuex），数据通信无非就是父传子，子传父，非父子通信，本文就讲父传子，子传父两种通信方式，把这两种吃透了，非父子通信也能手到擒来。父传子是通过props来传递数据的，子传父是通过this.$emit来实现的，具体实现请向下接着看。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="原始子组件代码"><a href="#原始子组件代码" class="headerlink" title="原始子组件代码"></a>原始子组件代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;border:1px solid black;width:400px;&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是子组件里的&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;button&gt;点击按钮子组件传递父组件&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;div&gt;我是父组件传子组件显示的:我还没有值&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt; </span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="原始父组件代码"><a href="#原始父组件代码" class="headerlink" title="原始父组件代码"></a>原始父组件代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;border:1px solid red;padding:2rem;width:500px;margin:50px auto;&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是父组件里的&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div&gt;我是子组件向父组件传递的:我还没有值&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;MyChild&gt;&lt;&#x2F;MyChild&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="网页显示效果"><a href="#网页显示效果" class="headerlink" title="网页显示效果"></a>网页显示效果</h2><p><img src="/2020/03/01/vue-component-talk/1.png" alt="img"> </p><p>网页显示可以清晰的看出来父子组件的结构，父组件包裹着子组件。</p><p>首先，我们先让父组件向子组件通信吧。实现方法是在子组件通过props来接受父组件传过来的值。我们在父组件定义了一个名为data的值，在子组件标签里bind动态绑定了这个值，如下图所示</p><h2 id="父向子传递实现方法"><a href="#父向子传递实现方法" class="headerlink" title="父向子传递实现方法"></a>父向子传递实现方法</h2><p>先定义变量</p><p><img src="/2020/03/01/vue-component-talk/2.png" alt="img"></p><p>修改MyChild标签内容</p><p><img src="/2020/03/01/vue-component-talk/3.png" alt="img"></p><p>接着在子组件里通过props来接收，如下图</p><p><img src="/2020/03/01/vue-component-talk/4.png" alt="img"></p><p> 这样子组件就接收到了父组件传递过来的值了，我们通过修改以下代码来看看这个值到底有没有接收到</p><p><img src="/2020/03/01/vue-component-talk/5.png" alt="img"></p><p><img src="/2020/03/01/vue-component-talk/6.png" alt="img"></p><p> 可以看到，我们父向子通信已经实现了，接下来就是子向父通信了，这个就要使用到this.$emit方法了。通过this.$emit(“”)来自定义事件，然后在父组件中监听事件。</p><h2 id="子传父实现方法"><a href="#子传父实现方法" class="headerlink" title="子传父实现方法"></a>子传父实现方法</h2><p>在子组件中给button按钮click事件，来通过this.$emit自定义事件，并传入一个参数，具体修改代码如图：</p><p><img src="/2020/03/01/vue-component-talk/7.png" alt="img"></p><p>在父组件中的子组件标签里，先在data里定义一个变量接收这个值，监听自定义事件，并接受这个参数赋值给定义的变量，修改代码如图：</p><p>再添加一个变量</p><p><img src="/2020/03/01/vue-component-talk/8.png" alt="img"></p><p> 然后再修改MyChild标签</p><p><img src="/2020/03/01/vue-component-talk/9.png" alt="img"></p><p>再在父组件的div里显示，代码如下：</p><p><img src="/2020/03/01/vue-component-talk/10.png" alt="img"></p><p> 现在进入到浏览器中，点击子传父的按钮，结果出    来了，下图展示整个运行结果</p><p><img src="/2020/03/01/vue-component-talk/11.png" alt="img"></p><p>由此子向父，父向子通信就都完成了。</p><p>讲的可能有些乱，附上完整代码就好多了</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><h2 id="附完整代码"><a href="#附完整代码" class="headerlink" title="附完整代码"></a>附完整代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Home.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;border:1px solid red;padding:2rem;width:500px;margin:50px auto;&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是父组件里的&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;div&gt;我是子组件向父组件传递的:&#123;&#123;childData&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;MyChild :fromFather&#x3D;&quot;data&quot; @ListenerChild&#x3D;&quot;(data)&#x3D;&gt;this.childData &#x3D; data&quot;&gt;&lt;&#x2F;MyChild&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyChild from &quot;.&#x2F;Child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      data: &quot;I am your father&quot;,</span><br><span class="line">      childData: &quot;&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyChild</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Child.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style&#x3D;&quot;border:1px solid black;width:400px;&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是子组件里的&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;()&#x3D;&gt;this.$emit(&#39;ListenerChild&#39;, &#39;I am your child&#39;)&quot;&gt;点击按钮子组件传递父组件&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;div&gt;我是父组件传子组件显示的:&#123;&#123;fromFather&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;fromFather&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      vue组件通信
    
    </summary>
    
    
      <category term="前端" scheme="https://gehaoyu201.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="https://gehaoyu201.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>我与编程的第一次</title>
    <link href="https://gehaoyu201.github.io/2020/03/01/my-first-article/"/>
    <id>https://gehaoyu201.github.io/2020/03/01/my-first-article/</id>
    <published>2020-03-01T10:59:10.000Z</published>
    <updated>2020-03-05T14:09:00.497Z</updated>
    
    <content type="html"><![CDATA[<p>本站于2020年3月1日建成，是用<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>快速生成的，主题选用的是<a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">archer</a></p><p>这是本站建立之后的第一篇文章，随便写写吧。</p><p>我第一次接触跟编程有关的东西是按键精灵，是在初中的时候，那是个QQ飞车很火的年代。当时盛行QQ飞车辅助工具，它不是外挂，它只是单纯的用来挂机刷等级，挂边境等等。</p><p>那个时候，只要是好的车队，必备辅助工具给车队成员使用。我当时心血来潮，也想创立一个车队，无奈当时辅助工具需要购买，记得是一个很高的价格，作为初中生的我并不能承担它的价格，于是为了省钱，我就决定研究它是如何做出来的，也就接触上了按键精灵这个软件，但我最终也没做得出来= = </p><p>后来由于我初中成绩太差，没有考上高中，就去了高职就读（真的后悔去高职上学！！）。</p><p>在高职的前四年，我没有学到啥东西，只知道翻墙上网，沉迷游戏。高职最后一年，我算幡然醒悟吧？听说了有五年制专转本这个东西，就想去读大学，然后就为了能上大学去学习了。其中，就有一门考试科目是c语言。</p><p>就这样，c语言成了我人生中第一个接触的正式编程语言（虽然只学到了指针 = = ）</p><p>当时学c语言的时候觉得好玩极了，整天都在手写c的代码（考试是要手写程序的），现在越来越深入了解程序员这个行业之后，只想哭，我太难了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本站于2020年3月1日建成，是用&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;快速生成的，主题选用的是&lt;a href=&quot;https://github.com/fi3ework/hexo-
      
    
    </summary>
    
    
      <category term="文章" scheme="https://gehaoyu201.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="随笔" scheme="https://gehaoyu201.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
